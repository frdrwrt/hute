#!/usr/bin/env bash

set -euo pipefail

function info() {
  echo -e "\033[0;33m == $1 == \033[0m"
}
function wellDone() {
  echo -e "\033[0;32m == Done == \033[0m"
}
function fail() {
  echo -e "\033[0;31m == ERROR == \n $1 \033[0m"
  exit 1
}

function publishCIBase() {
  info "Build image"
  docker build --tag hute/ci-base:latest --file .github/actions/Dockerfile.ci-base .
  info "Push image to docker hub"
  docker push hute/ci-base:latest
  wellDone 
}

function checkRequirements () {
  regex="^(Python 3.*)"
  if [[ ! $(python -V 2>&1) =~ $regex ]]; then fail "Python version needs to be 3.x"; fi
}

function start() {
  ansible-playbook infrastructure/local/start-db.yml
  info "Run migrations"
  yarn run-migrations
  wellDone
}

function startTest() {
  if [[ "$*" == *--ci* ]]
  then
    info "Install dependencies"
    yarn 
  fi
  info "Ensure test db is running"
  ansible-playbook infrastructure/local/start-test-db.yml
  info "Run migrations"
  yarn --cwd server run-migrations-test
  info "Run tests"
  yarn --cwd server test
  wellDone
}

function reset() {
  ansible-playbook infrastructure/local/reset-db.yml
  info "Run migrations"
  yarn run-migrations
  wellDone
}

function seed() {
  yarn --cwd server run-seeds
}

function deployProduction() {
  ansible-playbook -i infrastructure/production/inventory infrastructure/production/deploy.yml
}

function deployLocal() {
  ansible-playbook infrastructure/local/deploy.yml
}


while [ $# -gt 0 ]; do
  arg=$1
  case $arg in
    publish-cibase)
      publishCIBase
    ;;
    start)
      start
    ;;
    start-test)
      shift
      startTest "$@"
    ;;
    reset)
      reset
    ;;
    seed)
      seed
    ;;
    deploy-production)
      deployProduction
    ;;
    deploy-local)
      deployLocal
    ;;
    shortlist)
      echo option_1 option_2 shortlist
    ;;
    *)
     yarn "$@"
    ;;
  esac
  shift
done