#!/usr/bin/env bash

set -euo pipefail

function info() {
  echo -e "\033[0;33m == $1 == \033[0m"
}
function wellDone() {
  echo -e "\033[0;32m == Done == \033[0m"
}
function fail() {
  echo -e "\033[0;31m == ERROR == \n $1 \033[0m"
  exit 1
}

function publishCIBase() {
  info "Build image"
  docker build --tag hute/ci-base:latest --file Dockerfile.ci-base .
  info "Push image to docker hub"
  docker push hute/ci-base:latest
  wellDone 
}

function checkRequirements () {
  regex="^(Python 3.*)"
  if [[ ! $(python -V 2>&1) =~ $regex ]]; then fail "Python version needs to be 3.x"; fi
}

function migration() {
  info "Run migrations"
  if [ -z ${1+x} ]
  then
      yarn --cwd server run-migrations
      yarn --cwd server run-migrations-test
  else
    case $1 in
    dev)
      yarn --cwd server run-migrations
    ;;
    prod)
      yarn --cwd server run-migrations-prod
    ;;
    test)
      yarn --cwd server run-migrations-test
    ;;
    testci)
      yarn --cwd server run-migrations-testci
    ;;
    create)
      yarn --cwd server create-migration
    ;;
    *)
    fail "Command $arg not found"
    esac
  fi
  wellDone
}

function start() {
  info "START"
  if [ -z ${1+x} ]
  then
    ansible-playbook infrastructure/local/docker-state.yml --extra-vars "state=started"
    migration
  else
    case $1 in
      app)
        ansible-playbook infrastructure/local/docker-state.yml --extra-vars "container=app state=started"
      ;;
      server)
        ansible-playbook infrastructure/local/docker-state.yml --extra-vars "container=server state=started"
      ;;
      db)
        ansible-playbook infrastructure/local/docker-state.yml --extra-vars "container=db state=started"
        migration dev
      ;;
      db-test)
        ansible-playbook infrastructure/local/docker-state.yml --extra-vars "container=db-test state=started"
        migration test
      ;;
      *)
      fail "Command $arg not found"
    esac
  fi
  wellDone
}

function stop() {
  info "STOP"
  if [ -z ${1+x} ]
  then
    ansible-playbook infrastructure/local/docker-state.yml --extra-vars "state=absent"
  else
    case $1 in
      app)
        ansible-playbook infrastructure/local/docker-state.yml --extra-vars "container=app state=absent"
      ;;
      server)
        ansible-playbook infrastructure/local/docker-state.yml --extra-vars "container=server state=absent"
      ;;
      db)
        ansible-playbook infrastructure/local/docker-state.yml --extra-vars "container=db state=absent"
      ;;
      db-test)
        ansible-playbook infrastructure/local/docker-state.yml --extra-vars "container=db-test state=absent"
      ;;
      *)
      fail "Command $arg not found"
    esac
  fi
  wellDone
}

function seed() {
  info "Apply seed to db"
  yarn --cwd server run-seeds
  wellDone
}

while [ $# -gt 0 ]; do
  arg=$1
  case $arg in
    start)
      shift
      start "$@"
    ;;
    stop)
      shift
      stop "$@"
    ;;
    seed)
      seed
    ;;
    migration)
      shift
      migration "$@"
    ;;
    *)
     yarn "$@"
    ;;
  esac
  shift
done